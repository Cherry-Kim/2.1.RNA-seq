import string,sys,os,glob

def STEP0_hg38(STAR_HUMAN_INDEX,REFERENCE_GENOME,gtf):
    #1. Reference data download
    ##wget https://github.com/broadinstitute/picard/releases/download/2.27.4/picard.jar
    #1.1 Download the human reference genomes and the matching annotation files from the GENCODE website into the data subdirectory, and unzip the files. 
    os.system('wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_34/GRCh38.primary_assembly.genome.fa.gz')
    os.system('wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_34/gencode.v34.primary_assembly.annotation.gtf.gz')
    os.system('gunzip GRCh38.primary_assembly.genome.fa.gz gencode.v34.primary_assembly.annotation.gtf.gz')

    #1.2 Download the latest version of dbSNP in VCF format (this protocol uses build 155 for GRCh38) and its index file (which has a tbi suffix), from NCBI’s FTP site, into the data subdirectory.
    os.system('wget https://ftp.ncbi.nih.gov/snp/archive/b155/VCF/GCF_000001405.39.gz')
    os.system('wget https://ftp.ncbi.nih.gov/snp/archive/b155/VCF/GCF_000001405.39.gz.tbi')
    #--------------------------------------

    #2. Reference data setup 
    os.system('samtools faidx '+ REFERENCE_GENOME)
    os.system('java -jar /BIO2/RNA_GATK/picard.jar CreateSequenceDictionary R='+REFERENCE_GENOME)
    os.system('/BIO2/RNA_GATK/RNA2CM/STAR-2.5.4b/bin/Linux_x86_64/STAR --runMode genomeGenerate  --runThreadN 48 --genomeDir '+STAR_HUMAN_INDEX+' --genomeFastaFiles '+ REFERENCE_GENOME +'  --sjdbGTFfile '+gtf+'  --sjdbOverhang 100')
    #2.1 Create a four-column BED file, with the coordinates of all exons from the human annotation GTF, gzip the file and index it with tabix. This file will serve later as an interval file for GATK tools.
    os.system("""awk '{if($3=="exon") {print $1"\t"$4-100"\t"$5+100"\t"substr($16,2,length($16)-3)}}' gencode.v34.primary_assembly.annotation.gtf | sort -k 1,1 -k2,2n | bgzip > GRCh38_exome.bed.gz""")
    os.system('tabix GRCh38_exome.bed.gz')

    #2.2 Since the chromosome names in the dbSNP file from NCBI (NC_000001.11…) and the names in the COSMIC VCF (1, 2…) are not compatible with the chromosome names in the GENCODE release (chr1, chr2…), it is necessary to rename the chromosome names in both files. We provide mapping files for the chromosome names within the data directory. 
    #git clone https://github.com/elyadlezmi/RNA2CM.git
    # rename chromosomes of dbSNP file
    #os.system('bcftools annotate --threads 48 --output-type z --rename-chrs remapNCBI.txt --output dbSNPbuild154Renamed.vcf.gz GCF_000001405.39.gz')
    #os.system('tabix dbSNPbuild154Renamed.vcf.gz')
    
def STEP1_STAR(STAR_HUMAN_INDEX,SAMPLE):
    #Preprocessing of RNA-seq data
    #os.system('trim_galore --paired -j 48 --gzip  -o trim_galore/ --fastqc  '+ SAMPLE +'_R1.fastq.gz '+ SAMPLE +'_R2.fastq.gz  -q 20 --length 20')
    
    #Align the reads to the human reference genome using the STAR aligner in two-pass mode, outputting a sorted-by-coordinate alignment file in BAM format
    os.system('/BIO2/STAR-2.5.4b/bin/Linux_x86_64/STAR --runThreadN 48 --genomeDir '+ STAR_HUMAN_INDEX+' --readFilesIn trim_galore/'+ SAMPLE +'_R1_val_1.fq.gz trim_galore/'+ SAMPLE +'_R2_val_2.fq.gz  --outFileNamePrefix '+SAMPLE +' --outSAMtype BAM SortedByCoordinate --readFilesCommand zcat --outSAMattributes NM --twopassMode Basic --outFilterMultimapNmax 1 --outFilterMismatchNoverLmax 0.1')

def STEP2_DUPLICATE(SAMPLE):
    #Mark duplicated reads from the Filtered BAM file using MarkDuplicates of Picard tools
    os.system('gatk MarkDuplicates --CREATE_INDEX true --I '+SAMPLE+'Aligned.sortedByCoord.out.bam  --O '+SAMPLE+'marked_duplicates.bam --VALIDATION_STRINGENCY SILENT  --M '+SAMPLE+'marked_dup_metrics.txt')

def STEP3_SplitNCigarReads(SAMPLE,REFERENCE_GENOME,INTERVALS):
    #Using GATK’s SplitNCigarReads, modify the marked-duplicates BAM file to split reads that contain Ns in their CIGAR string (due to splice junctions within the reads) 
    os.system('gatk SplitNCigarReads  -R '+ REFERENCE_GENOME +' -I '+SAMPLE+'marked_duplicates.bam -O '+SAMPLE+'splitN.bam')

def STEP4_BQSR(SAMPLE,REFERENCE_GENOME,DBSNP):
    os.system('gatk ApplyBQSR -R '+ REFERENCE_GENOME +' -I '+sample+'_split.bam  -bqsr '+sample+'_recal.table  -O '+sample+'_recal.bam')
    #Add read groups to the aligned reads in the BAM file using AddOrReplaceReadGroups of Picard tools. This operation is needed because GATK4 requires the BAM headers to contain this piece of information, which is not generated by STAR during the alignment process
    os.system('gatk AddOrReplaceReadGroups --CREATE_INDEX true --I '+SAMPLE+'splitN.bam --O '+SAMPLE+'.grouped.bam --RGID rnasq --RGLB lb --RGPL illumina --RGPU pu --RGSM '+SAMPLE)
    #Perform base recalibration with GATK’s BaseRecalibrator on the BAM file, by supplying the tool with annotation files of known polymorphisms in VCF format. This will output a recalibration table used in the next step
    os.system('gatk BaseRecalibrator -I '+SAMPLE+'.grouped.bam  -R '+REFERENCE_GENOME+' --known-sites '+DBSNP+' -O '+SAMPLE+'.recal_data.table')
    # Apply base recalibration with GATK’s ApplyBQSR
    os.system('gatk ApplyBQSR -R '+REFERENCE_GENOME+' -I '+SAMPLE+'.grouped.bam --use-original-qualities --add-output-sam-program-record --bqsr-recal-file '+SAMPLE+'.recal_data.table -O '+SAMPLE+'.recal_output.bam')

def STEP5_HaplotypeCaller(SAMPLE,REFERENCE_GENOME):
    # Call variants using GATK’s HaplotypeCaller
    os.system('gatk HaplotypeCaller -R '+REFERENCE_GENOME+' -I '+SAMPLE+'.recal_output.bam -O '+SAMPLE+'.output.vcf.gz --dont-use-soft-clipped-bases --pcr-indel-model AGGRESSIVE')

def STEP6_VariantFiltering(SAMPLE,REFERENCE_GENOME):
    #To eliminate false positives, use GATK’s VariantFiltration to mark in the VCF all variant clusters of three or more variants within a window of 35 bp. Remove also any variants that conform to one or both of the following conditions: Fisher Strand >30 and Quality of Depth <2
    os.system('gatk VariantFiltration -R '+REFERENCE_GENOME+' -V '+SAMPLE+'.output.vcf.gz --cluster-window-size 35 -cluster 3 --filter-name "FS" --filter "FS > 30.0" --filter-name "QD" --filter "QD < 2.0" -O '+SAMPLE+'.hardfilter.vcf.gz')
    os.system("""bcftools view --threads 48 -i 'FILTER="PASS" ' --output-type z --output-file """+SAMPLE+"""filtered.vcf.gz """+SAMPLE+""".hardfilter.vcf.gz""")
    os.system('tabix '+SAMPLE+'filtered.vcf.gz')

    os.system('bcftools annotate --threads 48 -a GRCh38_exome.bed -h header.txt  -c CHROM,FROM,TO,Gene --output-type z --output '+SAMPLE+'named.vcf.gz '+SAMPLE+'filtered.vcf.gz')
    os.system('tabix '+SAMPLE+'named.vcf.gz')

    os.system('bcftools annotate --threads 48 -a dbSNPbuild154Renamed.vcf.gz -c INFO/RS --output-type z --output '+SAMPLE+'dbSNP.vcf.gz '+SAMPLE+'named.vcf.gz')

def main():
    STAR_HUMAN_INDEX,REFERENCE_GENOME,gtf,INTERVALS = '/BIO2/RNA_GATK/RNA2CM/data/GRCh38','/BIO2/RNA_GATK/RNA2CM/data/GRCh38/GRCh38.primary_assembly.genome.fa','/BIO2/RNA_GATK/RNA2CM/data/GRCh38/gencode.v34.primary_assembly.annotation.gtf','/BIO2/RNA_GATK/RNA2CM/data/GRCh38/GRCh38_exome.bed.gz'
    DBSNP = '/BIO2/RNA_GATK/RNA2CM/data/dbSNPbuild154Renamed.vcf.gz'
    STEP0_hg38(STAR_HUMAN_INDEX,REFERENCE_GENOME,gtf)
    co = 0
    fp = glob.glob('*_R1.fastq.gz')
    for fname in fp:
        co += 1
        SAMPLE = fname.split('_R1.fastq.gz')[0]
        print('### ',co, '  ', SAMPLE)
        STEP1_STAR(STAR_HUMAN_INDEX,SAMPLE)
        STEP2_DUPLICATE(SAMPLE)
        STEP3_SplitNCigarReads(SAMPLE,REFERENCE_GENOME,INTERVALS)
        STEP4_BQSR(SAMPLE,REFERENCE_GENOME,DBSNP)
        STEP5_HaplotypeCaller(SAMPLE,REFERENCE_GENOME)
        STEP6_VariantFiltering(SAMPLE,REFERENCE_GENOME)
main()
